{"version":3,"sources":["components/Drum.js","App.js","serviceWorker.js","index.js"],"names":["Drum","props","playSound","audio","current","play","id","text","parentNode","querySelector","innerText","React","createRef","this","className","onClick","src","ref","Component","document","addEventListener","e","key","toUpperCase","getElementById","parent","classList","add","remove","soundBank","mp3","keyName","App","map","sound","index","name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAEMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAKRC,UAAY,WACV,EAAKC,MAAMC,QAAQC,OACnB,IAAMC,EAAK,EAAKL,MAAMM,KACP,EAAKJ,MAAMC,QAAQI,WACXA,WACfC,cAAc,MAAMC,UAAYJ,GARxC,EAAKH,MAAQQ,IAAMC,YAHF,E,qDAcT,IAAD,EACiBC,KAAKZ,MAArBE,EADD,EACCA,MAAOI,EADR,EACQA,KACf,OACE,yBAAKO,UAAU,eAAeC,QAASF,KAAKX,UAAWI,GAAG,OACvDC,EACD,2BAAOS,IAAKb,EAAOG,GAAIC,EAAMO,UAAU,OAAOG,IAAKJ,KAAKV,a,GApB7Ce,aAyBnBC,SAASC,iBAAiB,WAAW,SAACC,GACpC,IAAMf,EAAKe,EAAEC,IAAIC,cACXpB,EAAQgB,SAASK,eAAelB,GACtC,GAAIH,EAAO,CACT,IAAIsB,EAAStB,EAAMK,WACnBiB,EAAOC,UAAUC,IAAI,UACrBxB,EAAME,OACNF,EAAMiB,iBAAiB,SAAS,WAC9BK,EAAOC,UAAUE,OAAO,iBAKf5B,QCrCT6B,EAAY,CAChB,CACEvB,GAAI,IACJwB,IAAK,2DACLC,QAAS,YAEX,CACEzB,GAAI,IACJwB,IAAK,2DACLC,QAAS,YAEX,CACEzB,GAAI,IACJwB,IAAK,2DACLC,QAAS,YAEX,CACEzB,GAAI,IACJwB,IAAK,6DACLC,QAAS,YAEX,CACEzB,GAAI,IACJwB,IAAK,2DACLC,QAAS,YAEX,CACEzB,GAAI,IACJwB,IAAK,yDACLC,QAAS,UAEX,CACEzB,GAAI,IACJwB,IAAK,6DACLC,QAAS,cAEX,CACEzB,GAAI,IACJwB,IAAK,6DACLC,QAAS,cAEX,CACEzB,GAAI,IACJwB,IAAK,yDACLC,QAAS,WAsBEC,MAlBf,WACE,OACE,yBAAK1B,GAAG,gBACN,yBAAKQ,UAAU,UAAUR,GAAG,WACzBuB,EAAUI,KAAI,SAACC,EAAOC,GAAR,OACb,kBAAC,EAAD,CACE5B,KAAM2B,EAAM5B,GACZgB,IAAKa,EACLhC,MAAO+B,EAAMJ,IACbM,KAAMF,EAAMH,aAEZ,IACJ,gCCnDYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzB,SAASK,eAAe,SDyHpB,kBAAmBqB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.131f8aba.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Drum extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.audio = React.createRef();\r\n  }\r\n\r\n  playSound = () => {\r\n    this.audio.current.play();\r\n    const id = this.props.text;\r\n    const parent = this.audio.current.parentNode;\r\n    const display = parent.parentNode;\r\n    display.querySelector(\"h1\").innerText = id;\r\n  };\r\n\r\n  render() {\r\n    const { audio, text } = this.props;\r\n    return (\r\n      <div className=\"box drum-pad\" onClick={this.playSound} id=\"key\">\r\n        {text}\r\n        <audio src={audio} id={text} className=\"clip\" ref={this.audio} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\ndocument.addEventListener(\"keydown\", (e) => {\r\n  const id = e.key.toUpperCase();\r\n  const audio = document.getElementById(id);\r\n  if (audio) {\r\n    let parent = audio.parentNode;\r\n    parent.classList.add(\"active\");\r\n    audio.play();\r\n    audio.addEventListener(\"ended\", () => {\r\n      parent.classList.remove(\"active\");\r\n    });\r\n  }\r\n});\r\n\r\nexport default Drum;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Drum from \"./components/Drum\";\nconst soundBank = [\n  {\n    id: \"Q\",\n    mp3: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\",\n    keyName: \"Heater-1\",\n  },\n  {\n    id: \"W\",\n    mp3: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\",\n    keyName: \"Heater-2\",\n  },\n  {\n    id: \"E\",\n    mp3: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\",\n    keyName: \"Heater-3\",\n  },\n  {\n    id: \"A\",\n    mp3: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\",\n    keyName: \"Heater-4\",\n  },\n  {\n    id: \"S\",\n    mp3: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\",\n    keyName: \"Heater-6\",\n  },\n  {\n    id: \"D\",\n    mp3: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\",\n    keyName: \"Dsc Oh\",\n  },\n  {\n    id: \"Z\",\n    mp3: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\",\n    keyName: \"Kick n Hat\",\n  },\n  {\n    id: \"X\",\n    mp3: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\",\n    keyName: \"RP4 Kick 1\",\n  },\n  {\n    id: \"C\",\n    mp3: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\",\n    keyName: \"Cev H2\",\n  },\n];\n\nfunction App() {\n  return (\n    <div id=\"drum-machine\">\n      <div className=\"display\" id=\"display\">\n        {soundBank.map((sound, index) => (\n          <Drum\n            text={sound.id}\n            key={index}\n            audio={sound.mp3}\n            name={sound.keyName}\n          />\n        ))}{\" \"}\n        <h1></h1>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}